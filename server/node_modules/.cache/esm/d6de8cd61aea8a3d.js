let Router,randomBytes;_1ae‍.x([["default",()=>_1ae‍.o]]);_1ae‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_1ae‍.w("crypto",[["randomBytes",["randomBytes"],function(v){randomBytes=v}]]);

const { User } = require('../models/User');
const { auth } = require("../middleware/auth");

const router = Router()

router.get("/auth", auth, (req, res) => {
    res.status(200).json({
        _id: req.user._id,
        isAdmin: req.user.role === 0 ? false : true,
        isAuth: true,
        email: req.user.email,
        name: req.user.name,
        address: req.user.address,
        role: req.user.role,
        image: req.user.image,
    });
});

router.post("/register", async (req, res) => {
    _1ae‍.g.console.log(req.body)
    try {
        let { name, email } = req.body;
        let user = await User.findOne({ name })
        if(user) {
            return res.status(400).json({
                success: false,
                message: 'Username is a already taken'
            })
        }
        user = await User.findOne({ email })
        if(user) {
            return res.status(400).json({
                success: false,
                message: 'Email is a already registered. Did you forget the password. Try resetting it.'
            })
        }
        user = new User ({
            ...req.body, 
            verificationCode: randomBytes(20).toString('hex')
        })
        await user.save((err, doc) => {
            if (err) return res.json({ success: false, err });
            return res.status(200).json({
                success: true
            });
        })
    } catch (err) {
        _1ae‍.g.console.log('ERR :', err.message)
        return res.status(500).json({
            success: false,
            messgae: 'AN error accurred...'
        })
    }
});

router.post(
    '/login',  
    async(req, res) => {
        try {
            let{ email, password } = req.body
            let user = await User.findOne({ email })
            if(!user) {
                return res.status(404).json({
                    loginSucces: false,
                    message: 'Username not found'
                })
            }
            // let userPassword = await user.comparePassword(password)
            // if(!userPassword) {
            //     return res.status(401).json({
            //         loginSucces: false,
            //         message: 'Incorrect password'
            //     })
            // }
            // if(!(await user.comparePassword(password))) {
            //     return res.status(401).json({
            //         loginSucces: false,
            //         message: 'Incorrect password'
            //     })
            // }
            // await user.generateToken((err, user) => {
            //     if (err) return res.status(400).send(err);
            //     res.cookie("w_authExp", user.tokenExp);
            //     res
            //         .cookie("w_auth", user.token)
            //         .status(200)
            //         .json({
            //             loginSuccess: true, 
            //             userId: user.getUserInfo(),
            //             token: user.token
            //         });
            // });


            user.comparePassword(req.body.password, (err, isMatch) => {
                if (!isMatch)
                    return res.json({ loginSuccess: false, message: "Wrong password" });
    
                user.generateToken((err, user) => {
                    if (err) return res.status(400).send(err);
                    res.cookie("w_authExp", user.tokenExp);
                    res
                        .cookie("w_auth", user.token)
                        .status(200)
                        .json({
                            loginSuccess: true, userId: user._id
                        });
                });
            });

            return res.status(200).json({
                loginSucces: true,
                user: user.getUserInfo(),
                token: `Bearer ${token}`,
                message: 'Hurray! You are now logged in.'
                
            })
        } catch (err) {
            _1ae‍.g.console.log('ERR :', err.message)
            return res.status(500).json({
                loginSucces: false,
                messgae: 'AN error accurred...'
            })
        }
    }
)



_1ae‍.d(router);